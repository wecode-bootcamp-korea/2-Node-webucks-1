// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name      String   @unique
  coffee    Coffee[]

  @@map("categories")
}

model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  email       String        @unique
  password    String
  coffeeLike  CoffeeLike[]
  commentLike CommentLike[]
  reComment   ReComment[]


  @@map("users")
}

model Size {
  id   Int    @id @default(autoincrement())
  name String @unique
  size String @unique

  coffee Coffee[]

  @@map("sizes")
}

model Coffee {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  koreanName  String       @map("korean_name")
  englishName String       @map("english_name")
  description String
  categoryId  Int?         @map("categories_id")
  sizeId      Int?         @map("sizes_id")
  size        Size?        @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  coffeeLike  CoffeeLike[]
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  Image       Image[]

  NutritionAmount   NutritionCoffee[]
  allergyToCoffee   allergyToCoffee?  @relation(fields: [allergyToCoffeeId], references: [id])
  allergyToCoffeeId Int?              @map("allergy_coffee_id")

  @@map("coffees")
}

model allergyToCoffee {
  id        Int       @id @default(autoincrement())
  allergyId Int       @map("allergies_id")
  coffeeId  Int       @map("coffees_id")
  allergy   Allergy[]
  coffee    Coffee[]

  @@map("allergy_coffee")
}

model Allergy {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  allergy   String   @unique

  allergyToCoffee   allergyToCoffee? @relation(fields: [allergyToCoffeeId], references: [id])
  allergyToCoffeeId Int?             @map("allergy_coffee_id")
  @@map("allergies")
}

model Image {
  id        Int      @id @default(autoincrement())
  mainId    Int?     @map("main_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  src       String
  coffee    Coffee   @relation(fields: [coffeeId], references: [id], onDelete: Cascade)
  coffeeId  Int      @map("coffees_id")

  @@map("images")
}

model Nutrition {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  nutrient        String            @unique
  NutritionAmount NutritionCoffee[]

  @@map("nutritions")
}

model NutritionCoffee {
  id          Int       @id @default(autoincrement())
  amount      String
  nutritionId Int       @map("nutritions_id")
  coffeeId    Int       @map("coffees_id")
  coffee      Coffee    @relation(fields: [coffeeId], references: [id], onDelete: Cascade)
  nutrition   Nutrition @relation(fields: [nutritionId], references: [id], onDelete: Cascade)

  @@map("nutrition_coffee")
}

model CoffeeLike {
  id       Int     @id @default(autoincrement())
  userId   Int?    @map("users_id")
  coffeeId Int?    @map("coffees_id")
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coffee   Coffee? @relation(fields: [coffeeId], references: [id], onDelete: Cascade)

  @@unique([userId, coffeeId])
  @@map("coffees_likes")
}

model Comment {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  description String
  userId      Int           @map("users_id")
  commentLike CommentLike[]
  reComment   ReComment[]

  @@map("comments")
}

model ReComment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  description String

  commentId Int     @map("comments_id")
  userId    Int?    @map("users_id")
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("re_comments")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("users_id")
  commentId Int?     @map("comments_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comments_likes")
}
